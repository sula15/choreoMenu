# +required The configuration file schema version
schemaVersion: 1.2
# +optional Incoming connection details for the component
endpoints:
  # +required Unique name for the endpoint.
  # This name will be used when generating the managed API
  - name: menu-service
    # +optional Display name for the endpoint.
    displayName: Restaurant Menu Service
    # +required Service section has the user service endpoint details
    service:
      # +optional Context (base path) of the API that gets exposed via the endpoint.
      basePath: /api
      # +required Numeric port value that gets exposed via the endpoint
      port: 8080
    # +required Type of traffic that the endpoint is accepting.
    # Allowed values: REST, GraphQL, WS, GRPC, TCP, UDP.
    type: REST
    # +optional Network level visibilities of the endpoint.
    # Accepted values: Project|Organization|Public(Default).
    networkVisibilities: 
      - Public
    # +optional Security configurations
    # Disable authentication for testing
    disableAuthentication: true
    # +optional Path to the schema definition file. Defaults to wild card route if not provided
    # This is only applicable to REST or WS endpoint types.
    # The path should be relative to the docker context.
    schemaFilePath: openapi.yaml
# +optional Outgoing connection details for the component.
dependencies:
  # +optional Defines the connection references from the Internal Marketplace.
  connectionReferences: []
    # Example if you need to connect to other services:
    # - name: payment-service-connection
    #   resourceRef: service:/RestaurantProject/PaymentComponent/v1/abc123/PUBLIC
# +optional Defines runtime configurations
configurations:
  # +optional List of environment variables to be injected into the component.
  env:
    - name: PORT
      valueFrom:
        configForm:
          displayName: Service Port
          required: false
          type: number
    - name: NODE_ENV
      valueFrom:
        configForm:
          displayName: Node Environment
          required: false
          type: string
    # Example if you need database connection:
    # - name: DB_CONNECTION_STRING
    #   valueFrom:
    #     configForm:
    #       displayName: Database Connection String
    #       required: true
    #       type: secret
  # +optional List of files to be injected into the component from config form
  file:
    - name: config.json
      mountPath: /app/config
      type: json
      values:
        - name: serviceName
          valueFrom:
            configForm:
              displayName: Service Name
              type: string
        - name: version
          valueFrom:
            configForm:
              displayName: Service Version
              type: string